{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CooldownService - KuperStudio A cooldown service that will make it easier for you to develop your systems, whether it's as player skills or just a simple tool service. What are the benefits the service gives? Ease and practicality that improve your code and performance. You won't waste time writing 100 lines just for cooldowns. A clean, uncluttered workspace. Why should I use CooldownService? CooldownService will bring you a simple and compact system to store time, thus having a better safe handling and better of that storage. CooldownService was developed by HottylewrSlip! GitHub Repository: Repository Service documentation: API Devforum Discussion Topic: Topic Roblox Library: Library","title":"Home"},{"location":"#cooldownservice-kuperstudio","text":"A cooldown service that will make it easier for you to develop your systems, whether it's as player skills or just a simple tool service.","title":"CooldownService - KuperStudio"},{"location":"#what-are-the-benefits-the-service-gives","text":"Ease and practicality that improve your code and performance. You won't waste time writing 100 lines just for cooldowns. A clean, uncluttered workspace.","title":"What are the benefits the service gives?"},{"location":"#why-should-i-use-cooldownservice","text":"CooldownService will bring you a simple and compact system to store time, thus having a better safe handling and better of that storage. CooldownService was developed by HottylewrSlip! GitHub Repository: Repository Service documentation: API Devforum Discussion Topic: Topic Roblox Library: Library","title":"Why should I use CooldownService?"},{"location":"api/","text":"API CooldownService CooldownService:GetCooldown(Name: string, ...any) local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) It will get a cooldown and return functions so that you can manipulate the cooldown. Note The main argument is the Cooldown name, but you can go on adding subcategories. This can be something like :GetCooldown('Power', Player.UserId, 'Powers') . Note that 'Power' is the name of the cooling and will be the last category to be listed in the table: { Players.UserId = { Powers = { Power = os.time() } } } . Cooldown Cooldown:Set() Cooldown : Set () Set cooldown to current time. Cooldown:Reset() Cooldown : Reset () Resets cooldown to zero. Cooldown:Get() local lastTime = Cooldown : Get () Get the current cooldown value. Cooldown:Update(Callback: (Time: number) -> any) local newTime = Cooldown : Update ( function ( Time ) if os.time () - Time >= 5 then print ( 'Success!' , Time ) end end ) Get the cooldown value and after executing the function, set the cooldown value to the current time. Cooldown:Compare(Number: number) local Time = Cooldown : Compare ( os.time ()) Compare the number entered as an argument with the cooldown value. Cooldown:Destroy() Cooldown : Destroy () Destroy current cooldown. Warning This will destroy all cooldown that are connected in the same class as the current one. It is recommended that you use reset() instead of destroy. Notice In the future we will bring a more appropriate function to the system.","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#cooldownservice","text":"","title":"CooldownService"},{"location":"api/#cooldownservicegetcooldownname-string-any","text":"local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) It will get a cooldown and return functions so that you can manipulate the cooldown. Note The main argument is the Cooldown name, but you can go on adding subcategories. This can be something like :GetCooldown('Power', Player.UserId, 'Powers') . Note that 'Power' is the name of the cooling and will be the last category to be listed in the table: { Players.UserId = { Powers = { Power = os.time() } } } .","title":"CooldownService:GetCooldown(Name: string, ...any)"},{"location":"api/#cooldown","text":"","title":"Cooldown"},{"location":"api/#cooldownset","text":"Cooldown : Set () Set cooldown to current time.","title":"Cooldown:Set()"},{"location":"api/#cooldownreset","text":"Cooldown : Reset () Resets cooldown to zero.","title":"Cooldown:Reset()"},{"location":"api/#cooldownget","text":"local lastTime = Cooldown : Get () Get the current cooldown value.","title":"Cooldown:Get()"},{"location":"api/#cooldownupdatecallback-time-number-any","text":"local newTime = Cooldown : Update ( function ( Time ) if os.time () - Time >= 5 then print ( 'Success!' , Time ) end end ) Get the cooldown value and after executing the function, set the cooldown value to the current time.","title":"Cooldown:Update(Callback: (Time: number) -&gt; any)"},{"location":"api/#cooldowncomparenumber-number","text":"local Time = Cooldown : Compare ( os.time ()) Compare the number entered as an argument with the cooldown value.","title":"Cooldown:Compare(Number: number)"},{"location":"api/#cooldowndestroy","text":"Cooldown : Destroy () Destroy current cooldown. Warning This will destroy all cooldown that are connected in the same class as the current one. It is recommended that you use reset() instead of destroy. Notice In the future we will bring a more appropriate function to the system.","title":"Cooldown:Destroy()"},{"location":"api/basicusage/","text":"Basic Usage After setting up the service, we can now learn more about our service and put each system into practice. Requiring To get started we will be calling our module depending on how we set it up. --// Services local CooldownService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'CooldownService' )) For the require we are calling the service ReplicatedStorage and after that requiring the module CooldownService that we insert in ReplicatedStorage. Getting Cooldown Obtaining Cooldown will provide us with various functions that we can use to manipulate our service and that is why obtaining our Cooldown is considered one of the most important part of the service. local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) To get our Cooldown we use function :GetCooldown() and enter a name for our Cooldown, optionally we can insert indexes that acted as subclasses in our Cooldown, this can also be called folders. Use of Cooldown Setting Time This function will change its cooldown value to the time the function was executed. Cooldown : Set () Resetting Time Will reset cooldown value to zero. Cooldown : Reset () Getting Time This function will get the value saved in cooldown. local Time = Cooldown : Get () Updating Time This function will get the current cooling value by entering it as an argument of the defined function and will set the cooling value for the time since the end of the entered function as an argument. Cooldown : Update ( function ( Time ) print ( Time ) end ) Comparing Value This function will compare the time entered as an argument with the cooldown time and thus give a return of the subtraction between the values. local Difference = Cooldown : Compare ( os.time ()) Destroying Cooldown Will destroy starting class from current cooldown. Cooldown : Destroy () Warning After destroying the initial class, all subclasses or other cooldowns with the same subclass references will be destroyed. Practing It is very important to put into practice everything we have learned so far so that there are no remaining doubts. For our practice we will be making a simple function that will compare if the elapsed time was greater than or equivalent to five between the configuration function and the update function. --// CooldownService local CooldownService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'CooldownService' )) local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) --// Variables local WaitingTime = math.random ( 0 , 10 ) --// Functions Cooldown : Set () --> Cooldown = os.time() print ( 1 , Cooldown : Get ()) --> print(Cooldown) task . wait ( WaitingTime ) Cooldown : Update ( function ( Time ) if Cooldown : Compare ( os.time ()) >= 5 then print ( 'Success!' , Time ) --> print('Success!', Cooldown) end end ) --> Cooldown = os.time() print ( 2 , Cooldown : Get ()) --> print(Cooldown)","title":"Basic Usage"},{"location":"api/basicusage/#basic-usage","text":"After setting up the service, we can now learn more about our service and put each system into practice.","title":"Basic Usage"},{"location":"api/basicusage/#requiring","text":"To get started we will be calling our module depending on how we set it up. --// Services local CooldownService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'CooldownService' )) For the require we are calling the service ReplicatedStorage and after that requiring the module CooldownService that we insert in ReplicatedStorage.","title":"Requiring"},{"location":"api/basicusage/#getting-cooldown","text":"Obtaining Cooldown will provide us with various functions that we can use to manipulate our service and that is why obtaining our Cooldown is considered one of the most important part of the service. local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) To get our Cooldown we use function :GetCooldown() and enter a name for our Cooldown, optionally we can insert indexes that acted as subclasses in our Cooldown, this can also be called folders.","title":"Getting Cooldown"},{"location":"api/basicusage/#use-of-cooldown","text":"Setting Time This function will change its cooldown value to the time the function was executed. Cooldown : Set () Resetting Time Will reset cooldown value to zero. Cooldown : Reset () Getting Time This function will get the value saved in cooldown. local Time = Cooldown : Get () Updating Time This function will get the current cooling value by entering it as an argument of the defined function and will set the cooling value for the time since the end of the entered function as an argument. Cooldown : Update ( function ( Time ) print ( Time ) end ) Comparing Value This function will compare the time entered as an argument with the cooldown time and thus give a return of the subtraction between the values. local Difference = Cooldown : Compare ( os.time ()) Destroying Cooldown Will destroy starting class from current cooldown. Cooldown : Destroy () Warning After destroying the initial class, all subclasses or other cooldowns with the same subclass references will be destroyed.","title":"Use of Cooldown"},{"location":"api/basicusage/#practing","text":"It is very important to put into practice everything we have learned so far so that there are no remaining doubts. For our practice we will be making a simple function that will compare if the elapsed time was greater than or equivalent to five between the configuration function and the update function. --// CooldownService local CooldownService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'CooldownService' )) local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) --// Variables local WaitingTime = math.random ( 0 , 10 ) --// Functions Cooldown : Set () --> Cooldown = os.time() print ( 1 , Cooldown : Get ()) --> print(Cooldown) task . wait ( WaitingTime ) Cooldown : Update ( function ( Time ) if Cooldown : Compare ( os.time ()) >= 5 then print ( 'Success!' , Time ) --> print('Success!', Cooldown) end end ) --> Cooldown = os.time() print ( 2 , Cooldown : Get ()) --> print(Cooldown)","title":"Practing"},{"location":"api/settingup/","text":"Setting Up CooldownService is a module, this means that to use the service you will need to request the module. For the required module we will have different options to do this. Requiring module 1. Getting by service ID Create a module in ReplicatedStorage Rename the module to CooldownService Insert a return with the require by service ID (8107228072) inside the module return require ( 8107228072 ) 2. Get it from the Roblox Library Get the library model Put the model inside ReplicatedStorage Rename the module to CooldownService 3. Get from GitHub CooldownService Repository Create a module in ReplicatedStorage Rename the module to CooldownService You must insert into the module the code mentioned below. return loadstring ( game : GetService ( 'HttpService' ): GetAsync ( 'https://raw.githubusercontent.com/KuperStudio/CooldownService/main/CooldownService.lua' , true ))()","title":"Setting up"},{"location":"api/settingup/#setting-up","text":"CooldownService is a module, this means that to use the service you will need to request the module. For the required module we will have different options to do this.","title":"Setting Up"},{"location":"api/settingup/#requiring-module","text":"","title":"Requiring module"},{"location":"api/settingup/#1-getting-by-service-id","text":"Create a module in ReplicatedStorage Rename the module to CooldownService Insert a return with the require by service ID (8107228072) inside the module return require ( 8107228072 )","title":"1. Getting by service ID"},{"location":"api/settingup/#2-get-it-from-the-roblox-library","text":"Get the library model Put the model inside ReplicatedStorage Rename the module to CooldownService","title":"2. Get it from the Roblox Library"},{"location":"api/settingup/#3-get-from-github","text":"CooldownService Repository Create a module in ReplicatedStorage Rename the module to CooldownService You must insert into the module the code mentioned below. return loadstring ( game : GetService ( 'HttpService' ): GetAsync ( 'https://raw.githubusercontent.com/KuperStudio/CooldownService/main/CooldownService.lua' , true ))()","title":"3. Get from GitHub"},{"location":"examples/Cooldown/","text":"Cooldown Two simple scripts that get results from the same cooling system even though they were separate. These scripts have communications between them where one will only initially set a value for the cooldown and after 5 seconds the second script will run an update function that will get the data for checking where if the data comparison is greater than five it will print a message of success and the time, by the way, the update function will finish setting a new time for the cooldown where after all that the current cooldown will be printed. Script-1 --// Services local CooldownService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'CooldownService' )) --// Variables local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) --// Functions Cooldown : Set () Script-2 --// Services local CooldownService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'CooldownService' )) --// Variables local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) --// Functions task . wait ( 5 ) Cooldown : Update ( function ( Time ) local Compare = Cooldown : Compare ( os.time ()) if Compare >= 5 then print ( 'Success!' , Time ) end end ) print ( Cooldown : Get ())","title":"Cooldown"},{"location":"examples/Cooldown/#cooldown","text":"Two simple scripts that get results from the same cooling system even though they were separate. These scripts have communications between them where one will only initially set a value for the cooldown and after 5 seconds the second script will run an update function that will get the data for checking where if the data comparison is greater than five it will print a message of success and the time, by the way, the update function will finish setting a new time for the cooldown where after all that the current cooldown will be printed.","title":"Cooldown"},{"location":"examples/Cooldown/#script-1","text":"--// Services local CooldownService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'CooldownService' )) --// Variables local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) --// Functions Cooldown : Set ()","title":"Script-1"},{"location":"examples/Cooldown/#script-2","text":"--// Services local CooldownService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'CooldownService' )) --// Variables local Cooldown = CooldownService : GetCooldown ( 'Cooldown' ) --// Functions task . wait ( 5 ) Cooldown : Update ( function ( Time ) local Compare = Cooldown : Compare ( os.time ()) if Compare >= 5 then print ( 'Success!' , Time ) end end ) print ( Cooldown : Get ())","title":"Script-2"}]}